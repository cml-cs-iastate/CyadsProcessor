# Generated by Django 3.1.3 on 2020-11-27 10:59

from django.db import migrations, models
import django.db.models.deletion
import processor.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdFile',
            fields=[
                ('id', models.AutoField(db_column='AdFile_ID', primary_key=True, serialize=False)),
                ('ad_filepath', models.TextField(help_text='Relative filepath where downloaded video file is stored', null=True)),
                ('collection_type', models.CharField(choices=[(processor.models.CollectionType['CYADS'], 'CyAds'), (processor.models.CollectionType['GOOGLETREPORT'], 'GoogleTReport')], help_text='Which :py:class:`Collection` the video file is part of', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Bots',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name given to bots, Keeps bot data from mixing together', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_id', models.IntegerField(help_text='Numeric category id used by YouTube Data API for each video categories')),
                ('name', models.CharField(help_text='Name of video category', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Channels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_id', models.TextField(help_text='Unique YouTube channel id')),
                ('name', models.CharField(help_text='Name of the YouTube channel selected by channel owner', max_length=255)),
                ('description', models.CharField(default='', help_text='Description of channel', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(max_length=100)),
                ('state_symbol', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(help_text='URL to find video')),
                ('title', models.TextField(default='', help_text='Title of YouTube video')),
                ('description', models.TextField(default='', help_text='The description provided for the YouTube video')),
                ('keywords', models.TextField(default='', help_text='List of keywords/tags video publisher used for the video')),
                ('watched_as_ad', models.BooleanField(default=0, help_text='1/True if video was viewed as an ad')),
                ('watched_as_video', models.BooleanField(default=0, help_text='1/True if video was viewed due to a video request')),
                ('checked', models.BooleanField(default=False, help_text='Whether the video entry has been checked and downloaded')),
                ('time_checked', models.DateTimeField(auto_now=True, help_text='Datetime the video was checked/downloaded', null=True)),
                ('check_status', models.CharField(choices=[(processor.models.CheckStatus['NOT_CHECKED'], 'NOT_CHECKED'), (processor.models.CheckStatus['FOUND'], 'FOUND'), (processor.models.CheckStatus['MISSING'], 'MISSING'), (processor.models.CheckStatus['ERROR'], 'ERROR'), (processor.models.CheckStatus['PRIVATE'], 'PRIVATE'), (processor.models.CheckStatus['USER_REMOVED'], 'USER_REMOVED'), (processor.models.CheckStatus['ACCOUNT_TERMINATED'], 'ACCOUNT_TERMINATED'), (processor.models.CheckStatus['LIVE_STREAM_REMOVED'], 'LIVE_STREAM_REMOVED')], default='NOT_CHECKED', help_text='What the result of the :py:class:`CheckStatus` is', max_length=64)),
                ('AdFile_ID', models.ForeignKey(db_column='AdFile_ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='processor.adfile')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='processor.categories')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='processor.channels')),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_timestamp', models.BigIntegerField(help_text='DateTime the batch of bots was started')),
                ('completed_timestamp', models.BigIntegerField(default=-1, help_text='DateTime the batch of bots finished running')),
                ('time_taken', models.IntegerField(default=-1, help_text='Time taken for batch to run through video list repetitions')),
                ('total_bots', models.IntegerField(default=0, help_text='Number of bots ran that were part of the batch')),
                ('server_hostname', models.CharField(default='NOT_FOUND_IN_JSON', help_text='The hostname of the server the bots ran on', max_length=30)),
                ('server_container', models.CharField(default='NOT_FOUND_IN_JSON', help_text='The docker container hostname (or same as server_hostname if not ran under docker)', max_length=30)),
                ('external_ip', models.CharField(default='0.0.0.0', help_text='The IP address that YouTube would sees', max_length=30)),
                ('status', models.CharField(default='Running', help_text='Status of batch, See Constants', max_length=20)),
                ('synced', models.BooleanField(default=False, help_text='Is the batch data synced to the server yet?')),
                ('processed', models.BooleanField(default=False, help_text='Has the synced batch data been processed yet?')),
                ('total_requests', models.IntegerField(default=0, help_text='Number of video requests the entire batch of bots made to YouTube')),
                ('total_ads_found', models.IntegerField(default=0, help_text='Number of ads shown to the whole batch of bots')),
                ('video_list_size', models.IntegerField(default=550, help_text='Number of videos in the video list the bots watched')),
                ('remarks', models.CharField(help_text='Used to indicated any problems with the batch data', max_length=255)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='processor.locations')),
            ],
            options={
                'ordering': ['start_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Ad_Found_WatchLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt', models.IntegerField(default=0, help_text='Which repetition of viewing the same video request in the list')),
                ('request_timestamp', models.BigIntegerField(default=0, help_text='The datetime the video was requested to view on YouTube')),
                ('ad_source', models.CharField(default='youtube', help_text='YouTube hosted ad or externally hosted', max_length=50)),
                ('ad_duration', models.IntegerField(default=0, help_text='How long the ad is in seconds')),
                ('ad_skip_duration', models.IntegerField(default=0, help_text='Required time before ad can be skipped')),
                ('ad_system', models.CharField(default='', help_text='Which ad serving provider the advertiser uses', max_length=255)),
                ('ad_video', models.ForeignKey(help_text='The ad shown', on_delete=django.db.models.deletion.PROTECT, related_name='ad_video', to='processor.videos')),
                ('batch', models.ForeignKey(help_text='The batch the ad view is part of', on_delete=django.db.models.deletion.PROTECT, to='processor.batch')),
                ('bot', models.ForeignKey(help_text='The bot the ad request was part of for a particular batch', on_delete=django.db.models.deletion.PROTECT, to='processor.bots')),
                ('video_watched', models.ForeignKey(help_text='The video request in the video list which had an ad view assoicated with it', on_delete=django.db.models.deletion.PROTECT, related_name='video_watched', to='processor.videos')),
            ],
        ),
    ]
